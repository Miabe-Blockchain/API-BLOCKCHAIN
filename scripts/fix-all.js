const { fixDatabase } = require('./fix-database');
const { fixBlockchain } = require('./fix-blockchain');
const logger = require('../utils/logger');

async function fixAll() {
  try {
    logger.info('üöÄ D√©but de la correction compl√®te du syst√®me...');
    
    // 1. Corriger la base de donn√©es
    logger.info('üìä √âtape 1: Correction de la base de donn√©es');
    await fixDatabase();
    
    // 2. Corriger la blockchain
    logger.info('‚õìÔ∏è √âtape 2: Correction de la blockchain');
    await fixBlockchain();
    
    // 3. V√©rifications finales
    logger.info('‚úÖ √âtape 3: V√©rifications finales');
    
    // V√©rifier que le serveur peut d√©marrer
    logger.info('üîß Test de d√©marrage du serveur...');
    
    // V√©rifier les mod√®les
    const { sequelize } = require('../models');
    await sequelize.authenticate();
    logger.info('‚úÖ Connexion √† la base de donn√©es OK');
    
    // V√©rifier les tables principales
    const [diplomaCount] = await sequelize.query('SELECT COUNT(*) as count FROM diplomas');
    const [userCount] = await sequelize.query('SELECT COUNT(*) as count FROM users');
    
    logger.info(`üìà Base de donn√©es: ${diplomaCount[0].count} dipl√¥mes, ${userCount[0].count} utilisateurs`);
    
    await sequelize.close();
    
    logger.info('üéâ Correction compl√®te termin√©e avec succ√®s !');
    logger.info('');
    logger.info('üìã R√©sum√© des corrections effectu√©es:');
    logger.info('   ‚úÖ Colonnes manquantes ajout√©es √† la base de donn√©es');
    logger.info('   ‚úÖ Types de donn√©es corrig√©s');
    logger.info('   ‚úÖ Contraintes de cl√©s √©trang√®res ajout√©es');
    logger.info('   ‚úÖ Index de performance cr√©√©s');
    logger.info('   ‚úÖ Configuration blockchain v√©rifi√©e');
    logger.info('');
    logger.info('üí° Prochaines √©tapes:');
    logger.info('   1. Red√©marrez votre serveur');
    logger.info('   2. Testez la cr√©ation d\'un dipl√¥me');
    logger.info('   3. Testez la v√©rification d\'un dipl√¥me');
    logger.info('   4. V√©rifiez que les erreurs 500 ont disparu');
    
  } catch (error) {
    logger.error('‚ùå Erreur lors de la correction compl√®te:', error);
    throw error;
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  fixAll()
    .then(() => {
      console.log('‚úÖ Correction compl√®te termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = { fixAll }; 